---
- name: Setup all nodes
  hosts: all
  become: yes
  tasks:
    - name: خواندن محتوای فعلی resolv.conf
      slurp:
        src: /etc/resolv.conf
      register: original_resolv_conf  # ذخیره محتوای اولیه

    - name: تنظیم موقت سرور DNS
      lineinfile:
        path: /etc/resolv.conf
        line: "nameserver 185.51.200.2"  # سرور DNS موقت
        state: present
        insertbefore: "^nameserver"  # قرار دادن در بالای لیست
      register: dns_set  # ثبت تغییرات

    - name: اضافه کردن کلید APT کوبرنتیز
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      register: add_apt_key
      until: add_apt_key is success  # تلاش تا موفقیت
      retries: 5  # حداکثر 5 تلاش
      delay: 10   # فاصله 10 ثانیه بین تلاش‌ها
      when: dns_set.changed  # فقط در صورت تغییر DNS

    - name: بازگرداندن resolv.conf به حالت اولیه
      copy:
        content: "{{ original_resolv_conf['content'] | b64decode }}"
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: '0644'
      when: dns_set.changed  # فقط در صورت تغییر DNS

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
        state: present
      changed_when: false # This module is inherently idempotent

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes
      register: install_k8s_packages
      until: install_k8s_packages is success
      retries: 3
      delay: 5

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
      when: install_k8s_packages.changed # Only apply if packages were installed or updated

    - name: Check if containerd config exists
      stat:
        path: /etc/containerd/config.toml
      register: config_stat

    - name: Generate default containerd config if not exists
      shell: containerd config default > /etc/containerd/config.toml
      when: not config_stat.stat.exists
      register: generate_config
      changed_when: generate_config.rc == 0

    - name: Add mirror settings to containerd config.toml
      blockinfile:
        path: /etc/containerd/config.toml
        marker: "# {mark} ANSIBLE MANAGED BLOCK for mirrors"
        block: |
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
          {% for registry in registries_to_mirror %}
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry }}"]
              endpoint = ["{{ mirror_registry }}"]
          {% endfor %}
          [plugins."io.containerd.grpc.v1.cri".registry.configs]
            [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ mirror_registry }}".auth]
              username = "{{ mirror_username }}"
              password = "{{ mirror_password }}"
      when: config_stat.stat.exists or generate_config.changed

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
      when: config_stat.stat.exists or generate_config.changed

- name: Initialize cluster on manager node
  hosts: managers
  become: yes
  tasks:
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: admin_conf_stat

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      register: kubeadm_init_output
      when: not admin_conf_stat.stat.exists
      run_once: true

    - name: Extract join command
      set_fact:
        join_command: "{{ kubeadm_init_output.stdout | regex_search('kubeadm join .* --discovery-token STORAGE-hash .*') }}"
      when: not admin_conf_stat.stat.exists
      run_once: true

    - name: Create .kube directory
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: not admin_conf_stat.stat.exists or not (stat(path='/home/{{ ansible_user }}/.kube/config').stat.exists)

    - name: Copy admin.conf to user's kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: not admin_conf_stat.stat.exists or not (stat(path='/home/{{ ansible_user }}/.kube/config').stat.exists)

    - name: Apply CNI plugin
      command: kubectl apply -f {{ cni_plugin_url }}
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config
      when: not admin_conf_stat.stat.exists
      run_once: true

- name: Join workers to the cluster
  hosts: workers
  become: yes
  tasks:
    - name: Check if worker is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_stat

    - name: Join worker to the cluster
      command: "{{ hostvars[groups['managers'][0]]['join_command'] }}"
      when: not kubelet_conf_stat.stat.exists
