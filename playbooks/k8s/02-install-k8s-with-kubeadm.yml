---
- name: Setup all nodes
  hosts: all
  become: yes
  vars:
    version: v1.32
  tasks:
    - name: Read current content of resolv.conf
      slurp:
        src: /etc/resolv.conf
      register: original_resolv_conf # Store the original content

    - name: Delete the file if it exists
      ansible.builtin.file:
        path: /etc/resolv.conf
        state: absent

    - name: Create a new file with content
      ansible.builtin.file:
        path: /etc/resolv.conf
        state: touch
        mode: "0644"

    - name: Add content to the file
      ansible.builtin.copy:
        content: |
          nameserver 185.51.200.2
          #nameserver 1.0.0.1
        dest: /etc/resolv.conf
      register: dns_set # Register changes
    - name: debug
      debug:
        msg: "{{dns_set}}"
    - name: Add Kubernetes APT key
      command: >
        /bin/sh -c
        "curl -fsSL https://pkgs.k8s.io/core:/stable:/{{version}}/deb/Release.key |
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: add_apt_key
      until: add_apt_key is success # Retry until success
      retries: 5 # Maximum 5 attempts
      delay: 10 # 10-second delay between attempts
      when: dns_set.changed # Only if DNS was changed

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{version}}/deb/ /
        state: present
        filename: kubernetes
      changed_when: false # This module is inherently idempotent

    - name: Restore resolv.conf to original state
      copy:
        content: "{{ original_resolv_conf['content'] | b64decode }}"
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: "0644"
      when: dns_set.changed # Only if DNS was changed

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - containerd
        state: present
        update_cache: yes
      register: install_k8s_packages
      until: install_k8s_packages is success
      retries: 3
      delay: 5

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
      when: install_k8s_packages.changed # Only apply if packages were installed or updated

    - name: Check if containerd config exists
      stat:
        path: /etc/containerd/config.toml
      register: config_stat

    - name: Ensure containerd config directory exists
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: "0755"
      register: dir_stat

    - name: Generate default containerd config if not exists
      shell: containerd config default > /etc/containerd/config.toml
      when: not config_stat.stat.exists
      register: generate_config
      changed_when: generate_config.rc == 0

    - name: Add mirror settings to containerd config.toml
      blockinfile:
        path: /etc/containerd/config.toml
        marker: "# {mark} ANSIBLE MANAGED BLOCK for mirrors"
        block: |
          version = 2
          [plugins."io.containerd.grpc.v1.cri".registry]
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
            {% for registry in registries_to_mirror %}
              [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry }}"]
                endpoint = ["https://{{ mirror_registry }}"]
            {% endfor %}
          [plugins."io.containerd.grpc.v1.cri".registry.configs]
            [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ mirror_registry }}".auth]
              username = "{{ mirror_username }}"
              password = "{{ mirror_password }}"
      when: config_stat.stat.exists or generate_config.changed

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
      when: config_stat.stat.exists or generate_config.changed

- name: Initialize cluster on manager node
  hosts: managers
  become: yes
  tasks:
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: admin_conf_stat

    - name: بررسی نسخه cgroup
      shell: stat -fc %T /sys/fs/cgroup/
      register: cgroup_version
      when: not admin_conf_stat.stat.exists
    - name: غیرفعال کردن موقت Swap
      shell: swapoff -a
      when: cgroup_version.stdout in ['tmpfs', 'cgroup2fs'] # برای v1 و v2
    - name: غیرفعال کردن دائمی Swap در fstab
      lineinfile:
        path: /etc/fstab
        regexp: "^([^#].*swap.*)$"
        line: '# \1'
        backrefs: yes
      when: cgroup_version.stdout in ['tmpfs', 'cgroup2fs'] # برای v1 و v2
    - name: فعال کردن دائمی IP Forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes
      when: not admin_conf_stat.stat.exists

    - name: pull Kubernetes cluster images
      command: kubeadm config images pull
      register: kubeadm_pull_output
      when: not admin_conf_stat.stat.exists
      run_once: true

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      register: kubeadm_init_output
      when: not admin_conf_stat.stat.exists
      run_once: true

    - name: Extract join command
      set_fact:
        join_command: "{{ kubeadm_init_output.stdout | regex_search('kubeadm join .* --discovery-token STORAGE-hash .*') }}"
      when: not admin_conf_stat.stat.exists
      run_once: true

    - name: Create .kube directory
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: not admin_conf_stat.stat.exists or not (stat(path='/home/{{ ansible_user }}/.kube/config').stat.exists)

    - name: Copy admin.conf to user's kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: not admin_conf_stat.stat.exists or not (stat(path='/home/{{ ansible_user }}/.kube/config').stat.exists)

    - name: Apply CNI plugin
      command: kubectl apply -f {{ cni_plugin_url }}
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config
      when: not admin_conf_stat.stat.exists
      run_once: true

- name: Join workers to the cluster
  hosts: workers
  become: yes
  tasks:
    - name: Check if worker is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_stat

    - name: Join worker to the cluster
      command: "{{ hostvars[groups['managers'][0]]['join_command'] }}"
      when: not kubelet_conf_stat.stat.exists
